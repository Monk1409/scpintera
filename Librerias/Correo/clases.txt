<p:commandButton action="#{reservaAgenda.enviarMail}" value="Send email"/>

public String enviarMail() {
        String ipServidor = "localhost";
        String puertoServidor = "443";
        String nombreAplicacion = "agenda";
        String parametros = "2";
        String urlServlet = "http://" + ipServidor + ":" + puertoServidor + "/" + nombreAplicacion + "/servlet/MiServlet?id=" + parametros;
        Map params = new HashMap();
        try {
            params.put("{textoCabecera}", "¡Gracias por confiar en nosotros!");
            params.put("{user}", "Roberto Carlos");
            params.put("{mensaje}", "Ha iniciado un proceso de auditoría con nosotros por lo que habilitamos una opción para que pueda actualizar la información correspondiente al perfil de su organización, por lo que le solicitamos acceder en un plazo no mayor a 5 días, ya que de lo contrario expirará y tendrá que volver a solicitarla. Haga click en el siguiente botón:");
            params.put("{urlServlet}", urlServlet);
            params.put("{textoBtn}", "Actualizar Perfil de la Organización");

            EnviarHtmlEmail email = new EnviarHtmlEmail("monicateresa.lopezc@gmail.com", "monicateresa.lopezc@gmail.com", "Prueba", "Esto es una prueba de envio de <b>email en html</b>", "localhost", "443");
        //List<String> adjuntos = new ArrayList<String>();
            //adjuntos.add("c:/pruebas.txt");
            
            email.enviarMailHtml(null, params);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
	
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mx.org.agenda.rules.reserva;

import java.io.File;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.Part;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import mx.org.agenda.rules.LeerArchivo;
import mx.org.db.hibernate.Constantes;
import mx.org.libs.pagina.JsfBase;

/**
 *
 * @author MónicaTeresa
 */
public class EnviarHtmlEmail {

    private Properties props = new Properties();
    private String from, to, subject, body, servidor, puerto;
    MimeMultipart multipart = new MimeMultipart("related");

    public EnviarHtmlEmail(String from, String to, String subject, String body, String server, String port) {
        setServidor(server);
        setPuerto(port);
        setProps(new Properties());
        getProps().setProperty("mail.transport.protocol", "smtp");
        getProps().put("mail.smtp.host", "smtp.gmail.com");
        getProps().put("mail.smtp.socketFactory.port", "465");
        getProps().put("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
        getProps().put("mail.smtp.auth", "true");
        getProps().put("mail.smtp.port", "465");
        setFrom(from);
        setTo(to);
        setSubject(subject);
        setBody(body);
    }

    public Properties getProps() {
        return props;
    }

    public void setProps(Properties props) {
        this.props = props;
    }

    public String getFrom() {
        return from;
    }

    public void setFrom(String from) {
        this.from = from;
    }

    public String getTo() {
        return to;
    }

    public void setTo(String to) {
        this.to = to;
    }

    public String getSubject() {
        return subject;
    }

    public void setSubject(String subject) {
        this.subject = subject;
    }

    public String getServidor() {
        return servidor;
    }

    public void setServidor(String servidor) {
        this.servidor = servidor;
    }

    public String getPuerto() {
        return puerto;
    }

    public void setPuerto(String puerto) {
        this.puerto = puerto;
    }

    public MimeMultipart getMultipart() {
        return multipart;
    }

    public void setMultipart(MimeMultipart multipart) {
        this.multipart = multipart;
    }

    public String getBody() {
        return body;
    }

    public void setBody(String body) {
        this.body = body;
    }

    public void enviarMailHtml(List<String> adjuntos, Map params) throws Exception {
        // propiedades de conexion al servidor de correo
        String cabecera = "<HTML><BODY>";//<img src='cid:cidcabecera'/>
        String pie = "</BODY></HTML>";//<img src='cid:cidpie'/>
        String ruta = JsfBase.getRequest().getSession().getServletContext().getRealPath("/Librerias/Correo/mail.txt");
        LeerArchivo archivo = new LeerArchivo(ruta);
        String mensaje = archivo.leeFichero();
        mensaje = mensaje.replace("{logo}", "cid:cidlogo");
        mensaje = mensaje.replace("{textoCabecera}", params.get("{textoCabecera}").toString());
        mensaje = mensaje.replace("{user}", params.get("{user}").toString());
        mensaje = mensaje.replace("{mensaje}", params.get("{mensaje}").toString());
        mensaje = mensaje.replace("{urlServlet}", params.get("{urlServlet}").toString());
        mensaje = mensaje.replace("{textoBtn}", params.get("{textoBtn}").toString());
        /** Parámetros a sustituir
         * {logo}
         * {textoCabecera}
         * {user}
         * {mensaje}
         * {urlServlet}
         * {textoBtn}
        **/
        //String boton = "<table><tr><td><form method='post' target='blank' action='http://" + ipServidor + ":" + puertoServidor + "/" + nombreAplicacion + "/servlet/MiServlet?id=" + parametros + "'> <input name='miBoton' type='submit' value='Boton' /></form>";
        String formulario = String.format("%s%s%s%s%s", cabecera, getBody(), "<br/> <br/>", mensaje, pie);

        addContent(formulario);

        //añadir imagenes
        String ruta1 = JsfBase.getRequest().getSession().getServletContext().getRealPath("/Librerias/Imagenes/Logos/intera_logo.PNG");
        //String ruta2 = JsfBase.getRequest().getSession().getServletContext().getRealPath("/Librerias/Imagenes/Iconos/bloqueado.png");
        addCID("cidlogo", ruta1);
        //addCID("cidpie", JsfBase.getRequest().getSession().getServletContext().getRealPath("/Librerias/Imagenes/Iconos/bloqueado.png"));

        // enviar adjuntos
        if (adjuntos != null) {
            for (String adjunto : adjuntos) {
                addAttach(adjunto); //ruta donde se encuentra el fichero que queremos adjuntar.
            }
        }

        // enviar el correo MULTIPART
        sendMultipart();
    }

    public void addContent(String htmlText) throws Exception {
        // first part (the html)
        BodyPart messageBodyPart = new MimeBodyPart();
        messageBodyPart.setContent(htmlText, "text/html");
        // add it
        this.multipart.addBodyPart(messageBodyPart);
    }

    public void addCID(String cidname, String pathname) throws Exception {
        DataSource fds = new FileDataSource(pathname);
        BodyPart messageBodyPart = new MimeBodyPart();
        messageBodyPart.setDataHandler(new DataHandler(fds));
        messageBodyPart.setHeader("Content-ID", "<" + cidname + ">");
        this.multipart.addBodyPart(messageBodyPart);
    }

    public void addAttach(String pathname) throws Exception {
        File file = new File(pathname);
        BodyPart messageBodyPart = new MimeBodyPart();
        DataSource ds = new FileDataSource(file);
        messageBodyPart.setDataHandler(new DataHandler(ds));
        messageBodyPart.setFileName(file.getName());
        messageBodyPart.setDisposition(Part.ATTACHMENT);
        this.multipart.addBodyPart(messageBodyPart);
    }

    public void sendMultipart() throws Exception {
        Session mailSession = Session.getDefaultInstance(getProps(),
                new javax.mail.Authenticator() {
                    protected PasswordAuthentication getPasswordAuthentication() {
                        return new PasswordAuthentication(Constantes.COR, Constantes.PSR);
                    }
                });
        mailSession.setDebug(true);
        Transport transport = mailSession.getTransport();
        MimeMessage message = new MimeMessage(mailSession);
        message.setSubject(this.getSubject());
        message.setFrom(new InternetAddress(this.getFrom()));
        message.addRecipient(Message.RecipientType.TO,
                new InternetAddress(this.getTo()));
        // put everything together
        message.setContent(multipart);
        transport.connect();
        transport.sendMessage(message,
                message.getRecipients(Message.RecipientType.TO));
        transport.close();
    }
}


package mx.org.agenda.rules;

import java.io.*;

public class LeerArchivo {

    private String rutaArchivo;

    public LeerArchivo(String rutaArchivo) {
        setRutaArchivo(rutaArchivo);
    }

    public String getRutaArchivo() {
        return rutaArchivo;
    }

    public void setRutaArchivo(String rutaArchivo) {
        this.rutaArchivo = rutaArchivo;
    }

    public String leeFichero() {
        StringBuilder lectura = new StringBuilder();
        File archivo = null;
        FileReader fr = null;
        BufferedReader br = null;

        try {
         // Apertura del fichero y creacion de BufferedReader para poder
            // hacer una lectura comoda (disponer del metodo readLine()).
            archivo = new File(getRutaArchivo());
            fr = new FileReader(archivo);
            br = new BufferedReader(fr);

            // Lectura del fichero
            String linea;            
            while ((linea = br.readLine()) != null) {
                lectura.append(linea);
                //System.out.println(linea);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
         // En el finally cerramos el fichero, para asegurarnos
            // que se cierra tanto si todo va bien como si salta 
            // una excepcion.
            try {
                if (null != fr) {
                    fr.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
        return lectura.toString();
    }
}

data-saferedirecturl=""
